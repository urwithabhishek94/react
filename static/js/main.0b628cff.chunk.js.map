{"version":3,"sources":["components/Model.js","components/Views.js","components/App.js","serviceWorker.js","index.js"],"names":["Model","props","useState","show","setShow","handleClose","className","name","Button","variant","onClick","location","Modal","onHide","Header","closeButton","Title","Body","activity_periods","map","row","i","key","start_time","end_time","Footer","api","axios","create","baseURL","Views","state","items","activity","get","res","this","setState","data","members","console","log","item","id","real_name","tz","renderList","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6QA+CiBA,MA1CjB,SAAeC,GAAQ,IAAD,EACMC,oBAAS,GADf,mBACXC,EADW,KACLC,EADK,KAGZC,EAAc,kBAAMD,GAAQ,IAGlC,OACE,oCAEM,wBAAIE,UAAU,iDAAd,SAAqEL,EAAMM,KAC3E,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UACdH,UAAU,mCACVI,QARS,kBAAMN,GAAQ,KAMzB,uBAIA,wBAAIE,UAAU,gDAAd,aAAwEL,EAAMU,UAGlF,kBAACC,EAAA,EAAD,CAAOT,KAAMA,EAAMU,OAAQR,GACzB,kBAACO,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,0BAEJ,kBAACJ,EAAA,EAAMK,KAAP,KAAahB,EAAMiB,iBAAiBC,KAAI,SAAUC,EAAIC,GAClD,OAAO,yBAAKC,IAAKD,GAChB,wBAAIf,UAAU,sDAAd,gBAC4Bc,EAAIG,WADhC,IAC4C,6BAD5C,cAC8DH,EAAII,eAIrE,kBAACZ,EAAA,EAAMa,OAAP,KACE,kBAACjB,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASL,GAAnC,aC/BNqB,EAAMC,IAAMC,OAAS,CACvBC,QAAQ,uDA4CGC,E,4MAzCXC,MAAQ,CAAEC,MAAO,GAAIC,SAAU,I,kMAITP,EAAIQ,M,OAAhBC,E,OACFC,KAAKC,SAAU,CAAEL,MAAOG,EAAIG,KAAKC,UACjCC,QAAQC,IAAIL,KAAKL,MAAMC,OACvBI,KAAKC,SAAU,CAAEJ,SAAUE,EAAIG,KAAKL,W,yIAOxC,OAAOG,KAAKL,MAAMC,MAAMb,KAAK,SAAAuB,GACzB,OACI,yBAAKpB,IAAKoB,EAAKC,IACX,wBAAIrC,UAAU,wBACV,kBAAC,EAAD,CACAC,KAAQmC,EAAKE,UACbjC,SAAY+B,EAAKG,GACjB3B,iBAAoBwB,EAAKxB,0B,+BAWzC,OACI,yBAAKZ,UAAU,qCACX,wBAAIA,UAAU,yBAAd,mBACD8B,KAAKU,kB,GApCAC,IAAMC,WCIXC,MARf,WACE,OACE,yBAAK3C,UAAU,OACd,kBAAC,EAAD,QCOe4C,QACW,cAA7BC,OAAOxC,SAASyC,UAEe,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.0b628cff.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Modal, ButtonGroup } from 'react-bootstrap';\r\nimport { useState } from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n\r\nfunction Model(props) {\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    \r\n    return (\r\n      <>\r\n      \r\n            <li className=\"list-group-item font-weight-normal text-info \">Name: {props.name }\r\n            <Button variant=\"success\" \r\n              className=\"text-decoration-none float-right\"\r\n              onClick={handleShow}> Activity Periods </Button>\r\n            </li>\r\n            <li className=\"list-group-item font-weight-normal text-info\">Location: {props.location}</li>  \r\n        \r\n  \r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Activity Periods</Modal.Title>\r\n          </Modal.Header>\r\n        <Modal.Body>{props.activity_periods.map(function (row,i) { \r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <div key={i}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t <li className=\"list-group-item font-weight-normal text-info  mb-2\">\r\n                           Start Time:  {row.start_time} <br /> End Time: {row.end_time}</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n         </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"success\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            {/* <Button variant=\"primary\" onClick={handleClose}>\r\n              Save Changes\r\n            </Button> */}\r\n          </Modal.Footer>\r\n        </Modal>\r\n        \r\n      </>\r\n    );\r\n  }\r\n  \r\n  export default Model;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Model from './Model'\r\nconst api = axios.create ( {\r\n    baseURL: `https://urwithabhishek94.github.io/react/data.json`\r\n})\r\nclass Views extends React.Component{\r\n    state = { items: [], activity: [] }\r\n    \r\n    async  componentDidMount()\r\n    {\r\n        const res = await api.get()\r\n            this.setState( { items: res.data.members})\r\n            console.log(this.state.items)\r\n            this.setState( { activity: res.data.activity})\r\n           \r\n\r\n        }\r\n    \r\n    renderList(){\r\n        \r\n        return this.state.items.map((item => {\r\n            return(\r\n                <div key={item.id}>\r\n                    <ul className=\"list-group mt-3 mb-3\">\r\n                        <Model\r\n                        name = {item.real_name }\r\n                        location = {item.tz}\r\n                        activity_periods = {item.activity_periods}\r\n                        />\r\n                    </ul>\r\n                    \r\n                </div>\r\n            )\r\n        }))\r\n    }\r\n    \r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"container mt-3 border border-dark\" >\r\n                <h3 className=\"text-center mt-2 mb-2\">List of Members</h3>\r\n              {this.renderList()} \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Views;","import React from 'react';\r\nimport Views from './Views'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <Views />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}